import string
import operator
import subprocess
import sys

from threading import Thread
from time import sleep

from PyQt4 import QtCore, QtGui

from twisted.internet.protocol import Protocol, Factory
from twisted.internet import reactor

from qtviewer import ImageViewer

from tegaki.character import *
from tegaki.charcol import *
from recognition.netcdf import NetCDFBuilder
from recognition.feature_extractor import FeatureExtractor

app = QtGui.QApplication(sys.argv)
imageViewer = ImageViewer()
imageViewer.show()

def parse_output_activations(output_file):
	"""
	output_filename - output_outputActivations file generated by dump_sequence_variables.sh util
	returns label index of who had the greatest value.
	"""
	file = open(output_file, 'r')
	activations = [float(line.strip()) for line in file.readlines()[2:]]
	label_index, _ = max(enumerate(activations), key=operator.itemgetter(1))
	return label_index


def recognize_writing(writing, writing_type):
	"""
	Using rnnlib tool dump_sequence_variables.sh.
	"""
	if writing_type == 'digit':
		labels = map(None, string.digits)
		net_save_path = "net_1a_12-35_full.save"
	else:
		raise Exception('Not good!')
	feature_extractor = FeatureExtractor(arc_len=30)
	nc_builder = NetCDFBuilder(labels, feature_extractor)
	ncFile = 'test.nc'
	nc_builder.convert_writing(writing, ncFile)

	# run dump_sequence_variables script
	dump_sequence_script_path = "/home/titei/Downloads/rnnlib_source_forge_version/utils/dump_sequence_variables.sh"
	working_directory = os.path.join(os.getcwd(), 'saved_networks')
	p = subprocess.Popen([dump_sequence_script_path, net_save_path, '../' + ncFile, '0', ], cwd=working_directory)
	p.wait()

	# parse output
	display_dir = 'saved_networks/display_' + net_save_path + '_' + ncFile + '_0'
	output_file = os.path.join(display_dir, 'output_outputActivations')
	label_index = parse_output_activations(output_file)

	#delete output dir
	for root, dirs, files in os.walk(display_dir, topdown=False):
		for name in files:
			os.remove(os.path.join(root, name))
		for name in dirs:
			os.rmdir(os.path.join(root, name))

	os.remove(ncFile)

	return labels[label_index]


class WritingRecognizerProtocol(Protocol):
	def connectionMade(self):
		print "Client connected!"
		self.transport.write("""connected""")
		self.factory.clients.append(self)
		self.complete_message = ''

	# print "clients are ", self.factory.clients

	def connectionLost(self, reason):
		self.factory.clients.remove(self)

	def dataReceived(self, data):
		self.complete_message += data
		if self.complete_message.endswith('</writing>'):
			print ' received message: ', self.complete_message
			try:
				print 'received writing'
				writing, writing_type = Writing.from_xml(self.complete_message)
			except xml.etree.ElementTree.ParseError as e:
				print 'Error:', str(e)
			label = recognize_writing(writing, writing_type)

			char = Character()
			char.set_utf8(label)
			char.set_writing(writing)
			char.save("test_char.xml")

			self.message(label)
			self.complete_message = ''

	def message(self, message):
		print "sending", message
		self.transport.write(message + '\n')

factory = Factory()
factory.protocol = WritingRecognizerProtocol
factory.clients = []

port = reactor.listenTCP(1234, factory)
print "Recognition server started on port", port.getHost().port
reactor.run()
